# -*- coding: utf-8 -*-
"""Week4_Machine_Learning_HR_Analytics_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dEKs3IEWnZYHouPczzBoaIewedxahB-a

# Introduction to Machine Learning

## **Background Information**

HR analytics is revolutionising the way human resources departments operate, leading to higher efficiency and better results overall. Human resources have been using analytics for years. However, the collection, processing, and analysis of data have beenlargely manual, and given the nature of human resources dynamics and HR KPIs, theapproach has been constraining HR. Therefore, it is surprising that HR departments woke up to the utility of machine learning so late in the game.

## **Problem Statement**

Your client is a large Multinational Corporation, and they have nine broad verticals across the organization. One of the problems your client faces is identifying the right people for promotion (only for the manager position and below) and preparing them in time.


Currently the process, they are following is:

● They first identify a set of employees based on recommendations/ past
performance.

● Selected employees go through the separate training and evaluation program for
each vertical.

● These programs are based on the required skill of each vertical. At the end of theprogram, based on various factors such as training performance, KPI completion(only employees with KPIs completed greater than 60% are considered) etc., theemployee gets a promotion.


For the process mentioned above, the final promotions are only announced after theevaluation, and this leads to a delay in transition to their new roles. Hence, the company needs your help in identifying the eligible candidates at a particular checkpoint so that they can expedite the entire promotion cycle.
They have provided multiple attributes around employees’ past and current performance along with demographics. Now, The task is to predict whether a potential promotee at a checkpoint will be promoted or not after the evaluation process.

How to dentify the right employees for promotion

**Loading needed Libraries & modules**
"""

# Import pandas for data manipulation
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, accuracy_score

"""**Data Importation**"""

#Getting and exploring the data
rawdataset_df = pd.read_csv('https://bit.ly/2ODZvLCHRDataset')
rawdataset_df.head()

"""**Data Exploration **"""

rawdataset_df.info()

"""**Data Preparation**"""

rawdataset_df.columns

"""**Data preparation**"""

#standardize colum names
rawdataset_df.columns = rawdataset_df.columns.str.strip().str.lower().str.replace('>', 'gt_').str.replace('%', '_pct').str.replace(' ','_').str.replace('?', '')
rawdataset_df.columns

#drop unnecessary columns
rawdataset_df.drop(columns = ['employee_id','recruitment_channel','gender','region'], inplace = True)
rawdataset_df.head()

#check missing data
rawdataset_df.isna().sum()

#check duplicates
rawdataset_df.duplicated().sum()

#drop missing rows
rawdataset_df.dropna(inplace = True)
rawdataset_df.isna().sum()

rawdataset_df.shape

# One-hot encode categorical variables
encoded_df = pd.get_dummies(rawdataset_df, columns=['department', 'education'], drop_first=True)
encoded_df.info()

"""**Data Modelling**"""

#split data to features and target
features = encoded_df.drop(columns = ['is_promoted'], axis =1)
target = encoded_df['is_promoted']

# training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Initialize and train a DecisionTreeClassifier model
model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model's performance
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(accuracy)
print(report)